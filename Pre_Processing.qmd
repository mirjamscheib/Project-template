---
title: "Semester_Project"
format: html
execute: 
  eval: true
---

# Pre-Processing 
## Packages 
```{r}
# clear space 
rm(list=ls())

# load packages 
library("readr")
library("dplyr")
library("ggplot2")
library("sf")
library("terra")
library("tmap")
library("gitcreds")
library("dplyr")
library("SimilarityMeasures")
library("lubridate")
library("plotly")

```

## Load Data 
We exclude gps data, because of the inherent different nature of data structure of this dataset.
```{r}
# load all posmo data --------------------------------------- 
posmo1 <- read_delim("posmo_data/steinm05_posmo_2023_04_10_2023_05_15.csv")
posmo2 <- read_delim("posmo_data/scheimir_posmo_2023-01-01T00_00_00+01_00-2023-05-15T23_59_59+02_00.csv")
posmo3 <- read_delim("posmo_data/a77bd18b-2615-4b03-802b-879bf3c93798_2023-01-01T00-00-00_2023-05-13T23-59-59.csv")
posmo4 <- read_delim("posmo_data/posmo - BuJa.csv") # nur bike data 
posmo5 <- read_delim("posmo_data/posmo_1.csv")
posmo6 <- read_delim("posmo_data/posmo_2.csv")
posmo7 <- read_delim("posmo_data/posmo_3.csv")
posmo8 <- read_delim("posmo_data/74137c1d0f374561eb733f3da00d0d3b0e01ad0edf7e441c9ea647ce3e44997d.csv")
posmo9 <- read_delim("posmo_data/Naladata.csv")
posmo10 <- read_delim("posmo_data/posmo_e3.csv")
posmo11 <- read_delim("posmo_data/posmo_validated_data_20230608.csv")
```

## Filter data/ create workable dataframe
```{r}
# name users for easier data handling 
posmo1 <- posmo1 |>  
  mutate(dataset = "posmo1")

posmo2 <- posmo2 |>  
  mutate(dataset = "posmo2")

posmo3 <- posmo3 |>  
  mutate(dataset = "posmo3")

posmo4 <- posmo4 |>  
   mutate(dataset = "posmo4")

posmo5 <- posmo5 |>  
  mutate(dataset = "posmo5")

posmo6 <- posmo6 |>  
  mutate(dataset = "posmo6")

posmo7 <- posmo7 |>  
  mutate(dataset = "posmo7")

posmo8 <- posmo8 |>  
  mutate(dataset = "posmo8")

posmo9 <- posmo9 |>  
  mutate(dataset = "posmo9")

posmo10 <- posmo10 |>  
  mutate(dataset = "posmo10")

posmo11 <- posmo11 |>  
  mutate(dataset = "posmo11")

# bind all data together, create a single dataframe 
posmo <- rbind(posmo1, posmo2, posmo3, posmo4, posmo5, posmo6, posmo7, posmo8, posmo9, posmo10, posmo11)

# Exclude rows with missing values using complete.cases() because transforming into sf object does not work, when we have missing values in coordinate columns
posmo <- posmo[complete.cases(posmo$lon_x), ]

# transform posmo data into an sf object 
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

# transform datetime into POSIXct format 
posmo <- posmo |>
  mutate(datetime = as.POSIXct(datetime))
```

### Cut Dataset in Time
```{r}
# look at data consistency
ggplot(posmo, aes(datetime, dataset))+
         geom_point()

# exclude posmo7, posmo4, posmo10 due to insufficient time overlap with the other datasets
# additionally remove user_id and place_name column, because the column dataset has unique/simple names for every user 
posmo <- posmo |>
  subset(dataset != "posmo4" & dataset != "posmo7" & dataset != "posmo10" & dataset != "posmo9" & dataset != "posmo8") |>
  select(-user_id, -place_name)

# control if posmo4 is removed 
posmo$dataset |> 
  unique()
# -> posmo4, posmo7 and posmo10 successfully removed

# plot data without outliers to set timespan for further analysis
ggplot(posmo, aes(datetime, dataset))+
         geom_point()

# choose timespan in which the most overlap of measurements between users is 
posmo <- posmo |>
  filter(datetime >= "2023-04-28 00:00:00", 
         datetime < "2023-05-09 00:00:00")           

# look at the new timecut data - more consistent 
ggplot(posmo, aes(datetime, dataset))+
         geom_point()
```

### Remove outliers 
```{r}
# delete trajectory data outside of switzerland (= delete outliers; norway & france): look at single posmo data to determine outliers 
tmap_mode("view")

# Check for outliers (outside of Switzerland)
tm_shape(posmo) +
  tm_dots()
# no outliers

# remove transport_mode "Airplane" because it is part of the outliers
# also remove transport_modes "Funicular" and "Other1" to exclude transportation modes which are not of interest 
posmo_cut <- posmo |>
  subset(transport_mode != "Airplane" & transport_mode != "Funicular" & transport_mode != "Other1")

# check if transport modes are cleaned 
unique(posmo_cut$transport_mode)

# save cleaned dataset in an .gpkg file to shorten calculation time for subsequent analysing steps 
st_write(posmo_cut, "posmo_data/posmo_cut.gpkg", delete_dsn = TRUE)
```


## Add convenience variables 
### day/night, weekend/weekday
```{r}
# load outlier free data for shorter calculation time 
posmo <- read_sf("posmo_data/posmo_cut.gpkg")

# Add convenience variable weekend vs. workday (Sa-So: Weekend, Mo-Fr: Workday) 
posmo <- posmo |>
  mutate(day_week = ifelse(weekday %in% c("Sat", "Sun"), "weekend", "weekday"))

# proof if convenience variables worked 
unique(posmo$day_week)

# add convenience variable with date only (without time) and remove columns which are not used
posmo <- posmo |> 
  mutate(date = lubridate::date(datetime)) 
```

### rain/no rain 
Meaning of the columns in weather: 
- tre200s0 = Air temperature 2 m above ground (momentary value in Â°C)
- rco150z0 = Precipitation duration in ten-minute sum 
- sre00z0 = Sunshine duration ten-minute sum
```{r}
# load all weather data 
legend <- read_delim("data/weather_legend.csv")
weather_raw <- read_delim("data/weather_measurements.csv") 

# join weather and legend data together
weather <- left_join(weather_raw, legend, by = "stn")

# create sf object of joined data
weather <- st_as_sf(weather, coords = c("E","N"), crs = 2056)

# create a new column with a rounded Datetime for the posmo data, to create a time join key with the weather data 
posmo <- posmo |>
  mutate(
    Datetime_round = lubridate::round_date(datetime, "10 minutes")
    )

# create an sf object for legend to calculate nearest stations
legend_sf <- st_as_sf(legend, coords = c("E","N"), crs = 2056) 

# calculate nearest weather stations from every point of trajectory
posmo$stn <- legend_sf$stn[st_nearest_feature(posmo, legend_sf)]

# select only rain data, time and station names from weather 
weather_posmo <- st_drop_geometry(weather) |> 
  select(rco150z0, time, stn) 

# join rain and station name information for every trajectory point which is the nearest to the calculated stations 
posmo_added <- left_join(posmo, weather_posmo, by = c("stn" = "stn", "Datetime_round" = "time"))

# create convenience variable with rain/no rain for every entry 
posmo_added <- posmo_added |>
  mutate(rain = ifelse(rco150z0 %in% c(0, NA), "no_rain", "rain"))
```

### rainy / not rainy day
```{r}
# calculate rainy, not rainy days 
posmo <- posmo_added |>
  group_by(date) |>
  mutate(sum_rain = sum(rco150z0, na.rm = TRUE),
         rain_day = ifelse(sum_rain < 20, "no_rain", "rain")) 
```

## Function to calculate metrics used 
```{r}
# writefunction to calculate steplength, timelag 
# function to calculate steplength
eucdist <- function(x, y) {
    steplength <- sqrt((lead(x, 2) - x)^2 + (lead(y, 2) - y)^2)
    return(steplength)
}

# function to calculate timelag
lag_time <- function(z) {
    timelag <- as.numeric(difftime(lead(z), z, units = "secs"))
    return(timelag)
}

# seperate coordinates in two different columns for subsequent analysis steps
posmo_coordinates <- st_coordinates(posmo)

# add the separated coordinates to the posmo variable 
posmo_sep <- cbind(posmo, posmo_coordinates)

# calculate timelag, steplenght and speed for the whole dataset
posmo <- posmo_sep |>
  mutate(
    timelag = lag_time(datetime),
    steplength = eucdist(X, Y),
    speed = steplength/timelag
    ) |>
  subset(!is.infinite(speed)) 
```

### Calculate temporal window
```{r}
### Calculate temporal windows 
# calculates time taken from each step to the next 
# n_plus2 calculates an offset of 2 time steps
posmo <- posmo |>
  mutate(
    n_plus1 = sqrt((lead(X) - X)^2 + (lead(Y) - Y)^2), # distance to pos + 10 seconds
    n_plus2 = sqrt((lead(X, 2) - X)^2 + (lead(Y, 2) - Y)^2), # distance to pos +20 seconds
    n_minus1 = sqrt((lag(X) - X)^2 + (lag(Y) - Y)^2), # distance to pos -10 seconds
    n_minus2 = sqrt((lag(X, 2) - X)^2 + (lag(Y, 2) - Y)^2) # distance to pos -20 seconds
  )

# ungroup() because when we apply rowwise() each row is a grouped individually which we don't want. 
posmo <- posmo |>
  rowwise()|>
  mutate(
    stepMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2))
  ) |>
  ungroup()

# define static points to discard later 
posmo <- posmo |>
    group_by(transport_mode) |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

# Segment-based analysis
# Assign segmet IDs and use them to remove short segments and calculate segment (trip) duration
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

# assign segment IDs to dataframe 
posmo <- posmo |>
    mutate(segment_id = rle_id(static))

# check the resulted segments 
unique(posmo$segment_id) 

# For mean duration of trips per weekday/weekend-day remove static segments and segments with duration < 10 min
# only movement segments
posmo_trips <- posmo |>
    filter(!static)
    
# calculate trip duration and trip distance
posmo_trips <- posmo_trips |>
  group_by(segment_id) |> 
  mutate(trip_duration = sum(speed/steplength), trip_dis = sum(steplength), trip_speed = sum(speed))
```

## Save cleaned, added dataset one with all and one with segmented data
```{r}
# save clean data set with .csv for segmented data
write_csv(posmo_trips, "posmo_data/posmo_trips.csv")
```



